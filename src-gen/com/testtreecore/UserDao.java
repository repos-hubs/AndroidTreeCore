package com.testtreecore;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.testtreecore.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Number = new Property(0, String.class, "number", true, "NUMBER");
        public final static Property _id = new Property(1, Integer.class, "_id", false, "_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property Comment = new Property(4, String.class, "comment", false, "COMMENT");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'NUMBER' TEXT PRIMARY KEY NOT NULL ," + // 0: number
                "'_ID' INTEGER," + // 1: _id
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'TEXT' TEXT NOT NULL ," + // 3: text
                "'COMMENT' TEXT," + // 4: comment
                "'DATE' INTEGER);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(1, number);
        }
 
        Integer _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(2, _id);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getText());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(5, comment);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // number
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // _id
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comment
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.set_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setText(cursor.getString(offset + 3));
        entity.setComment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getNumber();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
